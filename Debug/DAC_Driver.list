
DAC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  08000404  00001404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00001404  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00001404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  08000404  00001404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000013fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000404  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000404  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003bd  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000151  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000040  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e829  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000082e  00000000  00000000  00010211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053841  00000000  00000000  00010a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064280  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  000642c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00064390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003e4 	.word	0x080003e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003e4 	.word	0x080003e4

080001d8 <main>:
#define DAC_X1     PB13
#define DAC_X2     PB14
#define DAC_MSB    PB15

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
    GPIO_Config();
 80001de:	f000 f80f 	bl	8000200 <GPIO_Config>

	// We are interested in Step 3, 7, 10, 13
	// This should output 0.936 V, 2.187 V, 3.119 V, 4.05 V

    uint8_t step = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	71fb      	strb	r3, [r7, #7]
    uint8_t binaryValue = Convert_Step_To_Binary(step);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f89d 	bl	8000328 <Convert_Step_To_Binary>
 80001ee:	4603      	mov	r3, r0
 80001f0:	71bb      	strb	r3, [r7, #6]

    // Send the step value to the DAC
    Set_DAC_Value(binaryValue);
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f845 	bl	8000284 <Set_DAC_Value>

    while (1)
 80001fa:	bf00      	nop
 80001fc:	e7fd      	b.n	80001fa <main+0x22>
	...

08000200 <GPIO_Config>:
        // Infinite loop
    }
}

void GPIO_Config(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	// Enable GPIOB Clock
	RCC->AHB1ENR |= GPIOBEN;
 8000204:	4b1d      	ldr	r3, [pc, #116]	@ (800027c <GPIO_Config+0x7c>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a1c      	ldr	r2, [pc, #112]	@ (800027c <GPIO_Config+0x7c>)
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30

	// MODERy = 2 * y , (2 * y) + 1
	// Set them to 01 (Output Mode)

	// PB12 (Output Mode: Bits 25,24)
	GPIOB->MODER &= ~(3U << 24); // Clear both bits
 8000210:	4b1b      	ldr	r3, [pc, #108]	@ (8000280 <GPIO_Config+0x80>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a1a      	ldr	r2, [pc, #104]	@ (8000280 <GPIO_Config+0x80>)
 8000216:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800021a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 24); // Set PB12 as Output (01)
 800021c:	4b18      	ldr	r3, [pc, #96]	@ (8000280 <GPIO_Config+0x80>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a17      	ldr	r2, [pc, #92]	@ (8000280 <GPIO_Config+0x80>)
 8000222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000226:	6013      	str	r3, [r2, #0]

	// PB13 (Output Mode: Bits 27,26)
	GPIOB->MODER &= ~(3U << 26);
 8000228:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <GPIO_Config+0x80>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a14      	ldr	r2, [pc, #80]	@ (8000280 <GPIO_Config+0x80>)
 800022e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 26);
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <GPIO_Config+0x80>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a11      	ldr	r2, [pc, #68]	@ (8000280 <GPIO_Config+0x80>)
 800023a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800023e:	6013      	str	r3, [r2, #0]

	// PB14 (Output Mode: Bits 29,28)
	GPIOB->MODER &= ~(3U << 28);
 8000240:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <GPIO_Config+0x80>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0e      	ldr	r2, [pc, #56]	@ (8000280 <GPIO_Config+0x80>)
 8000246:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800024a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 28);
 800024c:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <GPIO_Config+0x80>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0b      	ldr	r2, [pc, #44]	@ (8000280 <GPIO_Config+0x80>)
 8000252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000256:	6013      	str	r3, [r2, #0]

	// PB15 (Output Mode: Bits 31,30)
	GPIOB->MODER &= ~(3U << 30);
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <GPIO_Config+0x80>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a08      	ldr	r2, [pc, #32]	@ (8000280 <GPIO_Config+0x80>)
 800025e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 30);
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <GPIO_Config+0x80>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a05      	ldr	r2, [pc, #20]	@ (8000280 <GPIO_Config+0x80>)
 800026a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020400 	.word	0x40020400

08000284 <Set_DAC_Value>:

void Set_DAC_Value(uint8_t value)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
    // Clear all 4 DAC pins
	GPIOB->ODR &= ~DAC_LSB;		// Clear PB12
 800028e:	4b25      	ldr	r3, [pc, #148]	@ (8000324 <Set_DAC_Value+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a24      	ldr	r2, [pc, #144]	@ (8000324 <Set_DAC_Value+0xa0>)
 8000294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000298:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~DAC_X1;		// Clear PB13
 800029a:	4b22      	ldr	r3, [pc, #136]	@ (8000324 <Set_DAC_Value+0xa0>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a21      	ldr	r2, [pc, #132]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002a4:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~DAC_X2;		// Clear PB14
 80002a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002b0:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~DAC_MSB;		// Clear PB15
 80002b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002bc:	6153      	str	r3, [r2, #20]

    if (value & (1U << 0))
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d005      	beq.n	80002d4 <Set_DAC_Value+0x50>
    {
        GPIOB->ODR |= DAC_LSB;  // If bit 0 is 1, set PB12 HIGH (X0)
 80002c8:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a15      	ldr	r2, [pc, #84]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002d2:	6153      	str	r3, [r2, #20]
    }

    // 1U << 1 creates a bitmask '0010' -> checks bit 1
    if (value & (1U << 1))
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	f003 0302 	and.w	r3, r3, #2
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d005      	beq.n	80002ea <Set_DAC_Value+0x66>
    {
        GPIOB->ODR |= DAC_X1;   // If bit 1 is 1, set PB13 HIGH (X1)
 80002de:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a10      	ldr	r2, [pc, #64]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e8:	6153      	str	r3, [r2, #20]
    }

    // 1U << 2 creates a bitmask '0100' -> checks bit 2
    if (value & (1U << 2))
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d005      	beq.n	8000300 <Set_DAC_Value+0x7c>
    {
        GPIOB->ODR |= DAC_X2;   // If bit 2 is 1, set PB14 HIGH (X2)
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <Set_DAC_Value+0xa0>)
 80002fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002fe:	6153      	str	r3, [r2, #20]
    }

    // 1U << 3 creates a bitmask '1000' -> checks bit 3 (Most Significant Bit)
    if (value & (1U << 3))
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f003 0308 	and.w	r3, r3, #8
 8000306:	2b00      	cmp	r3, #0
 8000308:	d005      	beq.n	8000316 <Set_DAC_Value+0x92>
    {
        GPIOB->ODR |= DAC_MSB;  // If bit 3 is 1, set PB15 HIGH (X3)
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <Set_DAC_Value+0xa0>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <Set_DAC_Value+0xa0>)
 8000310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000314:	6153      	str	r3, [r2, #20]
    }
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400

08000328 <Convert_Step_To_Binary>:

uint8_t Convert_Step_To_Binary(uint8_t step)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
    step &= 0x0F;  // Ensure step is within 4-bit range (0-15)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	f003 030f 	and.w	r3, r3, #15
 8000338:	71fb      	strb	r3, [r7, #7]
    return step;   // Return the binary value
 800033a:	79fb      	ldrb	r3, [r7, #7]
}
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	@ (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	@ (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	@ (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff2d 	bl	80001d8 <main>

0800037e <LoopForever>:

LoopForever:
  b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	@ (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	@ (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	@ (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	@ (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
